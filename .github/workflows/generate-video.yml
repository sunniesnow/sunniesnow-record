name: Generate video
on:
  workflow_dispatch:
    inputs:
      tmate:
        description: 'Start a tmate session'
        default: 'false'
        required: false
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  generate:
    name: Generate videos
    strategy:
      matrix:
        node-version: [18, 20] # ['18', '20.6', '21']
        os: [ubuntu-20.04, ubuntu-22.04, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        id: setup-ffmpeg

      - name: Set up Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Start tmate
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.tmate == 'true' }}

      - name: Restore cache
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ matrix.os }}-node-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Install build dependencies (Ubuntu)
        if: (matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04') && steps.cache-restore.outputs.cache-hit != 'true'
        # https://github.com/stackgl/headless-gl?tab=readme-ov-file#ubuntudebian
        # https://github.com/Automattic/node-canvas#compiling
        run: sudo apt-get install -y build-essential libxi-dev libglu1-mesa-dev libglew-dev pkg-config libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev

      - name: Install build dependencies (Windows)
        if: matrix.os == 'windows-latest' && steps.cache-restore.outputs.cache-hit != 'true'
        # https://github.com/Automattic/node-canvas/wiki/Installation:-Windows#install-manually
        run: |
          New-Item -Name temp -ItemType Directory
          Invoke-WebRequest https://ftp.gnome.org/pub/GNOME/binaries/win64/gtk+/2.22/gtk+-bundle_2.22.1-20101229_win64.zip -OutFile .\temp\gtk.zip
          Expand-Archive .\temp\gtk.zip -DestinationPath C:\GTK
          Invoke-WebRequest https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/2.1.5.1/libjpeg-turbo-2.1.5.1-vc64.exe -OutFile .\temp\libjpeg-turbo.exe
          .\temp\libjpeg-turbo.exe /S

      - name: Run npm ci
        run: npm ci --build-from-source
        if: steps.cache-restore.outputs.cache-hit != 'true'

      - name: Cache save
        uses: actions/cache/save@v3
        if: steps.cache-restore.outputs.cache-hit != 'true'
        with:
          path: ${{ github.workspace }}/node_modules
          key: ${{ matrix.os }}-node-${{ steps.setup-node.outputs.node-version }}-${{ hashFiles('package-lock.json') }}

      - name: Generate videos (Ubuntu)
        run: | # https://github.com/pixijs/node?tab=readme-ov-file#error-unable-to-auto-detect-a-suitable-renderer
          sudo apt-get install xvfb
          xvfb-run node --inspect=0.0.0.0:9229 cli.mjs --level-file online --level-file-online sunniesnow-sample --fps 15 --output output/output-${{ matrix.node-version }}-${{ matrix.os }}.mkv
        if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-22.04'

      - name: Generate videos (Windows) # use `--background none` to avoid loading SVG: https://github.com/Automattic/node-canvas/issues/2333
        run: node --inspect=0.0.0.0:9229 cli.mjs --level-file online --level-file-online sunniesnow-sample --background none --fps 15 --output output/output-${{ matrix.node-version }}-${{ matrix.os }}.mkv
        if: matrix.os == 'windows-latest'

      - name: Upload generated videos
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ steps.setup-node.outputs.node-version }}-${{ matrix.os }}
          path: output
  push:
    permissions: write-all
    runs-on: ubuntu-latest
    name: Push generated videos
    needs: generate
    steps:
      - uses: actions/download-artifact@v4
        name: Download generated videos
        with:
          pattern: output-*
          path: output
          merge-multiple: true
      - name: Push generated videos
        uses: crazy-max/ghaction-github-pages@v3
        with:
          target_branch: gh-action-output
          build_dir: output
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
